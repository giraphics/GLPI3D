#pragma once
#include "../../gles2_0_renderer/constant.h"
#include "../../gles2_0_renderer/GLutils.h"
#include <time.h>
namespace namespaceimage {
#define MAX_IMAGE_FILE_LENGTH 500


#define COLOR_MASK_PALETTE    1
#define COLOR_MASK_COLOR      2
#define COLOR_MASK_ALPHA      4

enum ImageColorType{
   COLOR_TYPE_GRAY = 0,
   COLOR_TYPE_PALETTE = (COLOR_MASK_COLOR | COLOR_MASK_PALETTE),
   COLOR_TYPE_RGB = (COLOR_MASK_COLOR),
   COLOR_TYPE_RGB_ALPHA = (COLOR_MASK_COLOR | COLOR_MASK_ALPHA),
   COLOR_TYPE_GRAY_ALPHA = (COLOR_MASK_ALPHA),
   COLOR_TYPE_RGBA = COLOR_TYPE_RGB_ALPHA,
   COLOR_TYPE_GA = COLOR_TYPE_GRAY_ALPHA
};

class ImageMemData
{
public:
	//! Represent extension of the file.
	ImageTypeEnum	extension;

   ImageColorType imgColorType;

	//! Width of the image in pixels. 
	int				width;

	//! Height of the image in pixels. 
	int				height;

	//! Raws bits generated by the Image parsers .
	unsigned char*	bitsraw;

	// Time Stamp for image life.
	clock_t		 timeStamp;

	// Time Stamp for image life.
	bool		 dontCareTimeStamp;

	//! File Name
	char fileName[MAX_IMAGE_FILE_LENGTH];

	unsigned int texID;
};

class IImage
{
public:
   IImage (void){}
   virtual ~IImage(void){}

	//! Load the image data sturucture by reading image specification.
	/**
		See if image is supportted by available parser if not return boolean false 
		else fill the data structure and return boolean true.
	*/
	virtual bool loadImage(const char* fileName, TextureTypeEnum textureType = TWO_DIMENSIONAL_TEXTURE) = 0;
   virtual bool loadImageCubeMaps(const char* fileName[6]) = 0;

	//! Release the image after use otherwise it could cause memory leak.
	virtual bool releaseImage() = 0;

	//! Return the raw buffer 
	virtual unsigned char* bits() = 0;

	//! Return the image height
	virtual int imageHeight() = 0;

	//! Return the image width
	virtual int imageWidth() = 0;

	//! Return the image extension
	virtual ImageTypeEnum imageExtension() = 0;

	//! Set the extension of the image file name
	virtual bool setExtension(ImageTypeEnum) = 0;

	//! Set the File Name
	virtual bool setFileName(char* fileName) = 0;

	//! Get the File Name
	virtual const char* fileName() = 0;

	//! Set the Texture ID
	virtual bool setTextureID(unsigned int id) = 0;

	//! Get the Texture ID
	virtual unsigned int& getTextureID() = 0;

   //! Get the color type of the image
   virtual ImageColorType colorType() = 0;

   //! Set the color type of the image
   virtual void setImageColorType(ImageColorType colorType) = 0;
};

//Parminder: This is the base class of the all image formats
class Image : public IImage
{
public:
	Image (void);
	virtual ~Image(void);

	//! Load the image data sturucture by reading image specification.
	/**
		See if image is supportted by available parser if not return boolean false 
		else fill the data structure and return boolean true.
	*/
	//virtual bool loadImage(char* fileName, TextureTypeEnum textureType = TWO_DIMENSIONAL_TEXTURE);
   //virtual bool loadImageCubeMaps(char* fileName[6]);

	//! Release the image after use otherwise it could cause memory leak.
	bool releaseImage();

	//! Return the raw buffer 
	unsigned char* bits();

   //! Delete the bits raw buffer 
   bool deleteBits(){ free(memData.bitsraw); memData.bitsraw = NULL; return true; }

	//! Return the image height
	int imageHeight();

	//! Return the image width
	int imageWidth();

	//! Return the image extension
	ImageTypeEnum imageExtension();

	//! Set the extension of the image file name
	bool setExtension(ImageTypeEnum);

	//! Set the File Name
	bool setFileName(char* fileName);

	//! Get the File Name
	const char* fileName();

	//! Set the Texture ID
	bool setTextureID(unsigned int id);

	//! Get the Texture ID
	unsigned int& getTextureID();

	//! Set the TimeStamp
	bool setTimeStamp(clock_t time);

	//! Get the TimeStamp
	clock_t getTimeStamp();

   //! Get the color type of the image
   ImageColorType colorType();

   //! Set the color type of the image
   void setImageColorType(ImageColorType colorType);

protected:
	ImageMemData memData;

};

}